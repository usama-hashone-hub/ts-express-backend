# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AuthInput {
  email: String!
  password: String!
}

type AuthUser {
  _id: ID!
  access: Token
  createdAt: DateTimeISO
  email: String
  name: String
  passwordResetCode: String
  passwordResetExpireAt: String
  refresh: Token
  role: String
  updatedAt: DateTimeISO
}

input ChangePasswordInput {
  currentPassword: String!
  email: String!
  newPassword: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input ForgetInput {
  email: String!
}

input ForgetInputCode {
  code: String!
  email: String!
}

type Mutation {
  ChangePassword(input: ChangePasswordInput!): ResMessage!
  Login(input: AuthInput!): AuthUser!
  SignUp(input: UserInput!): AuthUser!
  createPost(data: PostInput!): Post!
  createUser(input: UserInput!): User!
  deletePost(id: ID!): Boolean!
  forgetPassword(input: ForgetInput!): String!
  getForgetPasswordToken(input: ForgetInputCode!): String!
  updatePassword(input: UpdatePasswordInput!): AuthUser!
  updatePost(data: PostInput!, id: ID!): Post
  updateUser(input: UserUpdate!): User!
}

type Post {
  description: String!
  isActive: Boolean!
  likes: Float!
  title: String!
}

input PostInput {
  description: String!
  isActive: Boolean!
  likes: Float!
  title: String!
}

type Query {
  AuthQuery: String!
  TestBullQueue: String!
  TestRabbitMq: String!
  getUser(id: String!): User!
  getUsers: UserList!
  post(id: ID!): Post
}

type ResMessage {
  message: String
}

type Token {
  expires: DateTimeISO
  token: String
}

input UpdatePasswordInput {
  password: String!
  token: String!
}

type User {
  _id: ID!
  createdAt: DateTimeISO
  email: String
  name: String
  passwordResetCode: String
  passwordResetExpireAt: String
  role: String
  updatedAt: DateTimeISO
}

input UserInput {
  email: String!
  name: String!
  password: String!
  role: String!
}

type UserList {
  limit: Float
  page: Float
  results: [User!]!
  totalPages: Float
  totalResults: Float
}

input UserUpdate {
  email: String
  name: String
  password: String
}